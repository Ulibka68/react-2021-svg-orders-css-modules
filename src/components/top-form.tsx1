import React from "react";
import { css } from "@emotion/react";
import { useForm, SubmitHandler } from "react-hook-form";
import styled from "@emotion/styled";
// import "@/css/fa_font_local.css";
// import "@/css/all_signs.css";

const DivBG = styled.div`
  background: linear-gradient(
    125deg,
    #ecfcff 0%,
    #ecfcff 40%,
    #b2fcff calc(40% + 1px),
    #b2fcff 60%,
    #5edfff calc(60% + 1px),
    #5edfff 72%,
    #3e64ff calc(72% + 1px),
    #3e64ff 100%
  );
  max-width: 800px;
  padding: 1rem;
  margin-bottom: 1rem;
`;

const inpBaseFont = css`
  box-sizing: border-box;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  font-family: Arial;
`;

const inpBase = css`
  ${inpBaseFont};
  display: block;
  width: 100%;
  height: calc(1.5em + 0.75rem + 2px);
  padding: 0.375rem 0.75rem;
  color: #495057;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

  &:focus {
    color: #495057;
    background-color: #fff;
    border-color: #80bdff;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgb(0 123 255 / 25%);
  }
`;

const Input2 = ({ ...rest }) => (
  <input className={[inpBaseFont, inpBase].join(" ")} {...rest} />
);

const InpStyled = styled.input(inpBase);

const InpSelect = styled.select(inpBase);
const Label = styled.label`
  ${inpBaseFont};
  display: block;
  padding: 0.375rem 0.75rem;
  color: #2929bd;
`;
/*const Legend = styled.legend`
  color: #2929bd;
  ${inpBaseFont};
`;*/
const Legend = styled.legend([
  {
    color: "#2929bd",
  },
  inpBaseFont,
]);

type Inputs = {
  production_type: string;
  orderDate: Date;
  orderNumber: number;
  kantColor: string;
  kantWidth: number;
  podvesCounts: number;
  podvesLength: number;
  width: number;
  height1: number;
  height2: number;
  dividerWidth: number;
  leftDownToCenterDistance: number;
  horizontalDivider: boolean;
  verticalDivider: boolean;
};

export function TopForm() {
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<Inputs>({ defaultValues: { orderDate: defaultDate() } });

  const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data);

  // console.log(watch("example")); // watch input value by passing the name of it
  const dateChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    console.log(evt.target.value);
  };

  function defaultDate() {
    function addZero(n: number): string {
      if (n < 10) return "0" + n.toString();
      else return n.toString();
    }
    const d = new Date();
    const res = `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(
      d.getDate()
    )}`;
    console.log(res);
    return res;
  }
  // console.log(new Intl.DateTimeFormat("de-DE", options).format(date));

  function InputPrimary(props: {
    id: keyof Inputs;
    type: string;
    description: string;
  }) {
    return (
      <React.Fragment>
        <Label htmlFor={props.id}>{props.description}</Label>
        <InpStyled id={props.id} type={props.type} {...register(props.id)} />
      </React.Fragment>
    );
  }

  return (
    <DivBG>
      {/*"handleSubmit" will validate your inputs before invoking "onSubmit" */}
      <form onSubmit={handleSubmit(onSubmit)}>
        {/*<Input2 defaultValue="input2" />*/}
        <InputPrimary id="orderDate" type="date" description="Дата" />
        <InputPrimary id="orderNumber" type="number" description="Заказ №" />
        <InputPrimary id="kantColor" type="input" description="Цвет канта" />
        <InputPrimary id="kantWidth" type="number" description="Ширина канта" />
        <InputPrimary
          id="podvesCounts"
          type="number"
          description="Подвесы количество"
        />
        <InputPrimary
          id="podvesLength"
          type="number"
          description="Подвесы длина"
        />
        <InputPrimary id="width" type="number" description="Ширина" />
        <InputPrimary id="height1" type="number" description="Высота1" />
        <InputPrimary id="height2" type="number" description="Высота2" />
        <InputPrimary
          id="dividerWidth"
          type="number"
          description="Ширина разделителя"
        />
        <InputPrimary
          id="leftDownToCenterDistance"
          type="number"
          description="Расстояние до центральной
оси от левого нижнего угла"
        />
        <Label htmlFor="production_type">Вид изделия</Label>
        <InpSelect id="production_type" {...register("production_type")}>
          <option value="blindWindow">Глухое окно</option>
          <option value="openingWindow">Открывающееся окно</option>
          <option value="door">Дверь</option>
        </InpSelect>
        <fieldset>
          <Legend>Разделитель</Legend>
          <Label htmlFor="horizontalDivider">Горизонтальный разделитель</Label>
          <InpStyled
            id="horizontalDivider"
            type="checkbox"
            {...register("horizontalDivider")}
          />{" "}
          <Label htmlFor="verticalDivider">Вертикальный разделитель</Label>
          <InpStyled
            id="verticalDivider"
            type="checkbox"
            {...register("verticalDivider")}
          />
        </fieldset>

        <input type="submit" />
      </form>
    </DivBG>
  );
}
